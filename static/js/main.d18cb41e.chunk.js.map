{"version":3,"sources":["Library/Sudoku.js","Components/SudokuTimer.js","Components/SudokuField.js","Components/SudokuResult.js","Components/SudokuChallenge.js","Components/SudokuBoard.js","App.js","serviceWorker.js","index.js"],"names":["_getSavedPuzzle","puzzle","localStorage","getItem","JSON","parse","atob","generateSudoku","fromURL","match","document","location","search","result","console","log","extractURLData","puzzleData","raw","SudokuGenerator","makepuzzle","rawSolution","solvepuzzle","rawFormatted","map","e","rows","solution","startTime","Date","solvedTime","challengerStartTime","challengerSolvedTime","setItem","btoa","stringify","_savePuzzle","i","row","cols","index","j","value","col","readonly","push","shareURL","sudoku","data","query","href","replace","timeInHHMMSS","seconds","getInTime","timeSecs","type","time","days","Math","floor","hours","mins","secs","timeInDays","SudokuTimer","state","elapsed","this","interval","setInterval","setState","getTime","props","start","removeItem","window","navigator","clipboard","writeText","shareLinkRef","innerHTML","className","setTimeout","isAChallenge","isSolved","onClick","newSudoku","shareSudokuBoard","bind","ref","shareLink","Component","SudokuField","handleChange","target","parseInt","onChange","field","readOnly","SudokuResultTime","rel","SudokuChallenge","opponentSolvedTime","SudokuBoard","handleSolveClick","hiddingSolveBtn","SudokuResult","key","App","Produce","sudokuPuzzle","valueStr","toString","length","handleSolving","candidate","flat","checkSolution","solveSudoku","forEach","showSudokuTitle","addCurrentYear","currentYear","getFullYear","Boolean","hostname","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d18cb41e.chunk.js","sourcesContent":["import SudokuGenerator from 'sudoku';\n\nfunction _getSavedPuzzle() {\n    const puzzle = localStorage.getItem('puzzle');\n    return (puzzle) ? JSON.parse(atob(puzzle)) : null;\n}\n\nfunction _savePuzzle(puzzle) {\n    localStorage.setItem('puzzle', btoa(JSON.stringify(puzzle)));\n}\n\nexport function removeSavedPuzzle() {\n    localStorage.removeItem('puzzle');\n}\n\nexport function generateSudoku() {\n    const fromURL = extractURLData(),\n          puzzleData = _getSavedPuzzle(),\n          raw = (fromURL) ? fromURL.raw : SudokuGenerator.makepuzzle(),\n          rawSolution = (puzzleData) ? SudokuGenerator.solvepuzzle(puzzleData.raw) : SudokuGenerator.solvepuzzle(raw),\n          rawFormatted = (puzzleData) ? puzzleData.raw.map((e) => (e === null ? null: e+1)) : raw.map((e) => (e === null ? null: e+1)),\n          rawSolutionFormatted = rawSolution.map((e) => e+1);\n\n    let puzzle = {\n        raw: raw,\n        rows: [],\n        solution: rawSolutionFormatted,\n        startTime: new Date(),\n        solvedTime: null,\n        challengerStartTime: (fromURL && fromURL.startTime) || null,\n        challengerSolvedTime: (fromURL && fromURL.solvedTime) || null\n    };\n    \n    if (!fromURL && puzzleData) {\n        puzzleData.startTime = new Date(puzzleData.startTime);\n        puzzle = puzzleData;\n    } else {\n        _savePuzzle(puzzle);\n    }\n    \n    for(let i = 0; i < 9; i++) {\n        const row = {cols:[], index: i};\n        for(let j=0; j<9; j++) {\n            const value = rawFormatted[i*9+j],\n                  col = {\n                      row: i,\n                      col: j,\n                      value: value,\n                      readonly: (value !== null)\n                  };\n            row.cols.push(col);\n        }\n        puzzle.rows.push(row);\n    }\n\n    return puzzle;\n}\n\nexport function checkSolution(sudokuPuzzle) {\n    const candidate = sudokuPuzzle.rows\n        .map((row) => row.cols.map((col) => col.value))\n        .flat();\n\n    for(let i = 0; i < candidate.length; i++) {\n        if(null === candidate[i] || candidate[i] !== sudokuPuzzle.solution[i]) {\n        return false;\n        }\n    }\n    return true;\n}\n\nexport function shareURL(sudoku) {\n    sudoku = sudoku || _getSavedPuzzle();\n    const data = {\n            raw: sudoku.raw,\n            startTime: sudoku.startTime,\n            solvedTime: sudoku.solvedTime\n        },\n        query = btoa(JSON.stringify(data));\n    console.log('Share Sudoku Data:', data);\n    return document.location.href.replace(/\\?.+$/, '') + `?sudoku=${query}`;\n}\n\nexport function extractURLData() {\n    const match = document.location.search.match(/sudoku=([^&]+)/);\n    let result = null;\n    if(match) {\n        result = JSON.parse(atob(match[1]));\n        console.log('Got from URL:', result);\n    }\n    return result;\n}\n\nexport function opponentSolvedTime(startTime, solvedTime) {\n    let endTime = (startTime) ? Math.floor(\n        (new Date(solvedTime).getTime() - new Date(startTime).getTime())/1000\n        ) : null;\n    \n    return endTime;\n}\n\nexport function timeInHHMMSS(seconds) {\n    let time = '00:00:00';\n\n    const getInTime = (timeSecs, type) => {\n        let time = 0;\n\n        const aDay  = 24*60*60,\n              anHr = 60*60,\n              aMin = 60,\n              days  = Math.floor(timeSecs / aDay),\n              hours = Math.floor((timeSecs - days*aDay) / anHr),\n              mins  = Math.floor((timeSecs - days*aDay - hours*anHr) / aMin),\n              secs  = Math.floor(timeSecs - days*aDay - hours*anHr - mins*aMin);\n\n        switch(type) {\n            case 'days': time = days; break;\n            case 'hours': time = hours; break;\n            case 'mins': time = mins; break;\n            default: time = secs;\n        }\n\n        if(10 > time) {\n            time = '0' + time;\n        }\n\n        return time;\n    }\n\n    let timeInDays = getInTime(seconds, 'days'),\n        timeInHours = getInTime(seconds, 'hours'),\n        timeInMins = getInTime(seconds, 'mins'),\n        timeInSecs = getInTime(seconds);\n\n    time = ((timeInDays*1 && timeInDays + 'd ') || '') + timeInHours + ':' + timeInMins + ':' + timeInSecs;\n\n    return time;\n}","import React, {Component} from 'react';\nimport {timeInHHMMSS, removeSavedPuzzle, shareURL} from '../Library/Sudoku';\n\nclass SudokuTimer extends Component {\n\n    state = {\n        elapsed: 0\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(()=>{\n            this.setState({\n                elapsed: Math.floor(\n                    (new Date().getTime() - this.props.start.getTime()) / 1000\n                )\n            });\n        }, 1000);\n    }\n\n    componentWillUnmount() {\n        delete this.interval;\n    }\n\n    newSudoku() {\n        removeSavedPuzzle();\n        window.location.href=\"/\";\n    }\n\n    shareSudokuBoard() {\n        navigator.clipboard.writeText(shareURL());\n        this.shareLinkRef.innerHTML = 'Link copied to your clipboard, paste it wherever you want to share it <br/> (Whatsapp, Telegram, social networks, etc.)';\n        this.shareLinkRef.className = 'message';\n        setTimeout(()=> {\n            this.shareLinkRef.innerHTML = '';\n            this.shareLinkRef.className = 'message hidden';\n        }, 15000);\n    }\n\n    render() {\n        const {elapsed} = this.state,\n              {isAChallenge, isSolved} = this.props;\n\n        return (\n            <section className=\"sudoku-timer\">\n                {!isSolved && <h3>{isAChallenge ? 'Your Time': 'Time'}: {timeInHHMMSS(elapsed)}</h3>}\n                <p className=\"sudoku-actions\">\n                    <button className=\"new-sudoku-btn icon icon-sudoku\" onClick={this.newSudoku}>New Sudoku Board</button>\n                    {!isSolved && <button className=\"share-link-btn icon icon-link\" onClick={this.shareSudokuBoard.bind(this)}>Share Sudoku Board</button>}\n                </p>\n                <p ref={(shareLink) => this.shareLinkRef = shareLink } className=\"message hidden\"></p>\n            </section>\n        );\n    }\n}\n\nexport default SudokuTimer;","import React, {Component} from 'react';\n\nclass SudokuField extends Component {\n\n    handleChange = (e) => {\n        const value = (e.target.value !== '') ? parseInt(e.target.value, 10) : null;\n        this.props.onChange({...this.props.field, value});\n    }\n\n    render(){\n        const {field} = this.props;\n        \n        return (\n            <input className=\"field\" value={(field.value || '')} readOnly={field.readonly} onChange={this.handleChange}/>\n        );\n    }\n}\n\nexport default SudokuField;","import React, {Component} from 'react';\nimport {timeInHHMMSS} from '../Library/Sudoku';\n\nclass SudokuResultTime extends Component {\n\n    render() {\n        const {sudoku} = this.props,\n              elapsed = Math.floor((sudoku.solvedTime.getTime() - sudoku.startTime.getTime())/1000);\n\n        return (\n            <section className=\"sudoku-resultTime\">\n                <h2>You Solved it!!</h2>\n                <h3>You solved the Sudoku in {timeInHHMMSS(elapsed)} seconds</h3>\n                <p>Challenge a Friend (or enemy) to solved it in less time: <a href={sudoku.shareURL} target=\"_blank\" rel=\"noopener noreferrer\">Share Link</a></p>\n            </section>\n        );\n    }\n}\n\nexport default SudokuResultTime;","import React, {Component} from 'react';\nimport {timeInHHMMSS} from '../Library/Sudoku';\n\nclass SudokuChallenge extends Component {\n\n    render() {\n        const {opponentSolvedTime} = this.props;\n\n        return (\n            <section className=\"sudoku-challenge\">\n                <h3>Your opponent solved this sudoku in {timeInHHMMSS(opponentSolvedTime)} seconds.</h3>\n            </section>\n        );\n    }\n}\n\nexport default SudokuChallenge;","import React, {Component} from 'react';\nimport SudokuTimer from './SudokuTimer';\nimport SudokuField from './SudokuField';\nimport SudokuResult from './SudokuResult';\nimport SudokuChallenge from './SudokuChallenge';\nimport {opponentSolvedTime} from '../Library/Sudoku'\n\nclass SudokuBoard extends Component {\n\n    render(){\n        const {puzzle, onChange, handleSolveClick, hiddingSolveBtn} = this.props,\n              isSolved = puzzle.solvedTime;\n        \n        return (\n            <section className={`sudoku-board${(isSolved) ? ' solved': ''}`}>\n                {puzzle.challengerSolvedTime && <SudokuChallenge \n                    opponentSolvedTime={opponentSolvedTime(\n                        puzzle.challengerStartTime,\n                        puzzle.challengerSolvedTime\n                    )}/>\n                }\n                {isSolved && <SudokuResult sudoku={puzzle}/>}\n                <SudokuTimer start={puzzle.startTime} isAChallenge={(puzzle.challengerStartTime)} isSolved={isSolved}/>\n                <div className=\"board-grid\">\n                    {puzzle.rows.map((row, i)=>(\n                        <div key={row.index} className=\"row\">\n                            {row.cols.map((field)=>(\n                                <SudokuField key={field.col} field={field} onChange={onChange}/>\n                                ))}\n                        </div>\n                    ))}\n                </div>\n                <br/>\n                {!hiddingSolveBtn && <button onClick={handleSolveClick}>Solve it Magically!</button>}\n                \n            </section>\n        );\n    }\n}\n\nexport default SudokuBoard;","import React, {Component} from 'react';\nimport SudokuBoard from './Components/SudokuBoard';\nimport {generateSudoku, checkSolution, shareURL} from './Library/Sudoku';\nimport Produce from 'immer';\nimport './App.css';\n\nclass App extends Component{\n\n  state = Produce({},()=>({\n    sudokuPuzzle: generateSudoku()\n  }));\n\n  handleChange = (e) => {\n    let valueStr = ((e.value && e.value.toString()) || ''),\n        value = (1 < valueStr.length) ? parseInt(valueStr[0]) : e.value;\n\n    this.setState(\n      Produce((state) => {\n        state.sudokuPuzzle.rows[e.row].cols[e.col].value = value;\n        state = this.handleSolving(state);\n      })\n    );\n  }\n\n  handleSolving = (state) => {\n    if(!state.sudokuPuzzle.solvedTime) {\n      const isSolved = checkSolution(state.sudokuPuzzle);\n      if(isSolved) {\n        state.sudokuPuzzle.solvedTime = new Date();\n        state.sudokuPuzzle.shareURL = shareURL(state.sudokuPuzzle);\n      }\n    }\n    return state;\n  }\n\n  solveSudoku = (e) => {\n    this.setState(\n      Produce((state) => {\n        console.log('Solution: ', state.sudokuPuzzle);\n        state.sudokuPuzzle.rows.forEach((row)=>{\n          row.cols.forEach(col=>{\n            col.value = state.sudokuPuzzle.solution[col.row * 9 + col.col];\n          });\n        });\n      })\n    );\n  }\n\n  showSudokuTitle() {\n    return (this.state.sudokuPuzzle.challengerStartTime) ? 'SUDOKU CHALLENGE!!!' : 'Sudoku Game';\n  }\n\n  render() {\n    const addCurrentYear = () => {\n            let addCurrentYear = '',\n                currentYear = new Date().getFullYear();\n            \n            if(2019 !== currentYear) {\n              addCurrentYear = '-' + currentYear;\n            }\n\n            return addCurrentYear;\n          };\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>{this.showSudokuTitle()}</h1>\n        </header>\n        <main>\n          <SudokuBoard \n            puzzle={this.state.sudokuPuzzle}\n            onChange={this.handleChange}\n            handleSolveClick={this.solveSudoku}\n            hiddingSolveBtn={true}\n          />\n        </main>\n        <footer>\n          <p>&copy; 2019{addCurrentYear()} - Created by <a href=\"https://genesisappsweb.com\" target=\"_blank\" rel=\"noopener noreferrer\">Géne-Sis Apps Web</a></p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}